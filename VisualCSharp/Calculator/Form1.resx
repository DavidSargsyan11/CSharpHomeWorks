<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>